Doc issues:
- reflect.Value.Set: says "assigns x to the value v"; swap x and v.

Language:
- Is there a crucial reason := works in functions but not in outer scope
	to declare global variables?

Wishlist for Go standard library changes:
- Reverse() function in 'bytes' package to reverse byte-order of a byte-slice.
	Or alternatively, endian-selectable Bytes/GetBytes in math.big.
	Or a byte-slice-reversal function in encoding package.
- big.Int needs:
	- bit-field instructions: fill, scan, insert, extract
- Shouldn't elliptic.CurveParams have a field for cofactor,
	to support anything other than NIST prime-order curves?
- strings package should contain a String interface containing only:
	func String() string
- bytes.Buffer needs a SetBytes() method.
- bytes needs a Grow() or Alloc() function that extends a buffer
	without re-allocating it or initializing the growth space if possible,
	and otherwise copies to a new larger buffer.
	Behaves like append but leaves the newly-"appended" area
	for the caller to initialize.
- bytes needs a Copy() function that allocates and copies a byte-slice.
- It appears to be impossible to use an unkeyed element-list to initialize
	a struct that contains any blank fields (e.g., padding).
	If you don't list an element corresponding to the blank field,
	then the compiler complains about the next field being the wrong type;
	it's clearly expecting to see something listed for the blank field.
	But if you do list an element of the correct type for the blank field,
	then the compiler complains "cannot refer to blank field or method".
	Although you can still initialize such structs using keys,
	it seems unfortunate and unnecessary to lose the sometimes valuable
	ability to have the compiler check statically that your struct
	literal initializes all the (useful) fields of the struct.
	This brings the question of how struct-literals with blanks
	_should_ be initialized with unkeyed struct literals:
	two obvious answers seem to be (a) don't require them
	to be listed at all (just have the compiler skip over them), or
	(b) for consistency-checking, require them to be listed
	but with some syntax indicating "no value", e.g., just "...,_,...".
- Why does the test framework produce documentation for
	ExampleEncode_test1() but not ExampleEncode_Test1()?
	Is this just a bug or is there a reason for this finickyness?
- bytes.Buffer: needs Alloc() or WriteAlloc() function, which grows the buffer
	and returns a byte-slice representing the newly-allocated region,
	which the caller must fill in before making any other API call.
- Really need to support relative import paths within global packages;
	otherwise it seems that anyone who creates a copy or fork of a repo
	hosted in some other location, even just temporarily
	(for development purposes) must go through and change all the
	import paths throughout the repository that refer to
	other packages in the same repo by their global import paths.
- Why doesn't godoc process formatting in the comment for an Example,
	like it does in the comments for functions and everything else?
- os or ioutil should have a "ReplaceFile" that safely opens and
	writes a temporary file and atomically moves it over the top
	of an existing file only on successful Close().
- time/Time.[Un]MarshalBinary should document exactly what binary
	encoding it uses (preferably some kind of standard)
- bufio: Reader and Writer should have a Size() function,
	a Grow() function that grows the buffer without losing data.
- bufio.Reader should have a WriteBytesTo() function that can be used
	to skip or send a given number of bytes to a destination Writer.
	(WriteTo() is close but just sends the whole remaining stream.)
	Perhaps DivertTo, for a temporary rather than permanent diversion?

